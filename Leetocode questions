1) Richest Customer wealth
//https://leetcode.com/problems/richest-customer-wealth/

class Solution {
    public int maximumWealth(int[][] accounts) {
        int max =Integer.MIN_VALUE;
        for(int account =0;account<accounts.length;account++){
            int sum=0;
            for(int customer=0;customer<accounts[account].length;customer++){
                sum+=accounts[account][customer];
            }
            if(sum>max){
                max=sum;
            }
        }return max;
        
    }
}


2) Find Numbers with Even Number of Digits
//https://leetcode.com/problems/find-numbers-with-even-number-of-digits/

class Solution {
    public int findNumbers(int[] nums) {
        int count=0;
        for(int num:nums){
            if(even(num)){
                count++;
            }
        }return count;
      
    }
     boolean even(int num){
        int noDigit = digit(num);
        return noDigit%2==0;
    }
    
     int digit(int num){
        if(num<0){
            num = num * -1;
        }
        return (int)(Math.log10(num))+1;
    }
        
}

3) Palindrome Number
//https://leetcode.com/problems/palindrome-number/

class Solution {
    public boolean isPalindrome(int x) {
               int temp=x;
        int sum=0;
        while(x>0){
            int rem=x%10;
            
            sum=(sum*10)+rem;
            x=x/10;
        }
        if(sum==temp){
            return true;
        }else{
            return false;
        }
    }
        
}
